AVALIAÇÃO  02-Avaliacao-Nivelamento-SergioCaueGomes.rb

1) Defina uma função chamada “produto”, que deve receber um array de números e que deve retornar o produto resultante entre eles (a multiplicação de todos os elementos entre si). 

Ex.:

puts(produto([1, 4, 7]))               # deve imprimir 28
puts(produto([10, 100, 1000, 0, -1]))  # deve imprimir 0


2) Faça uma função chamada 'multiplica_arrays' que deve receber como parâmetros 2 arrays e deve retornar um valor numérico que deve ser o resultado da soma da multiplicação entre os elementos que ocupam a mesma posição em cada array.

Ex.:

puts multiplica_arrays([1, 2, 3], [10, 20, 30]) # deve imprimir 140

Pois o resultado é igual a: (1*10) + (2*20) + (3*30)

Obs.: Valide se os 2 arrays têm o mesmo tamanho. Caso não tiverem, a função deve retornar nil.


3) Defina uma função “altura_escada” que deve receber um número inteiro para representar a altura da escada e deve retornar um array de strings para representar graficamente a escada.

Valide o parâmetro da altura da escada, que deve ser um número maior ou igual a 1. Caso contrário, a função deve retornar um array vazio.

Ex.:

puts(altura_escada(1))
# deve imprimir
#

puts(altura_escada(2))
# deve imprimir
_#
##

puts(altura_escada(3))
# deve imprimir
__#
_##
###

puts(altura_escada(5))
# deve imprimir
____#
___##
__###
_####
#####

puts(altura_escada(0))
# deve imprimir nada, pois tem que retornar um array vazio



4) As árvores utópicas crescem de uma forma particular, em dois ciclos:

A cada primavera, dobram seu tamanho.
A cada verão, crescem um metro.
Se uma árvore utópica é plantada com um metro no final do outono, qual seria sua altura depois de N ciclos?

Exemplo:
Se N = 0, altura será 1 metro (não cresceu nada)
Se N = 1, altura será 2 metros (dobrou a altura na primavera)
Se N = 2, altura será 3 metros (cresceu mais 1 metro no verão)
Se N = 3, altura será 6 metros (dobrou a altura na primavera seguinte)
E assim por diante...

Defina a função “altura_arvore_utopica”, que recebe a altura inicial da árvore utópica plantada no final do outono e a quantidade de ciclos de crescimento, e que retorne a altura resultante após a quantidade de ciclos de crescimento informada.

Valide a altura inicial (que não pode ser zero ou menor) e a quantidade de ciclos (que não pode ser negativo). Caso a validação falhar, a função deve retornar nil.

puts(altura_arvore_utopica(2, 5))
# deve imprimir 22 
# pois a altura da árvore iniciou com 2, após 1º ciclo foi para 4, 
# após 2º foi para 5, após 3º foi para 10, após 4º foi para 11 e 
# após 5º foi para 22.

puts(altura_arvore_utopica(0, 5))
# deve imprimir nada, pois retornou nil 

puts(altura_arvore_utopica(10, -1))
# deve imprimir nada, pois retornou nil 

puts(altura_arvore_utopica(2, 4))
# deve imprimir 11


5) O número PI ou 3.14159... pode ser obtido através de várias fórmulas. Uma forma simples de obtê-lo é pela fórmula de Leibniz, que diz que a convergência da seguinte série infinita é igual a PI:

PI = 4/1 - 4/3 + 4/5 - 4/7 + 4/9 - 4/11 ...

Escreva uma função chamada "calcula_pi" que recebe o número de termos a serem usados na fórmula de Leibniz para obter o valor de PI. O resultado do cálculo deve ser retornado pela função.

Valide o número de termos. Deve ser um número inteiro maior ou igual 1. Se a validação falhar, a função retorna nil.

OBS.: Não se esqueçam que o retorno da função deve ser um número ponto flutuante!

Ex: 

puts(calcula_pi(4))
# deve retornar o valor de (4/1 - 4/3 + 4/5 - 4/7), ou seja, 2.8952380952380956
# note que a expressão tem 4 termos, pois 4 foi o número de termos informado no parâmetro.


6) O governo do Estado de SP registra o número de mortes por covid diariamente. No entanto, para publicar os resultados de modo mais amigável, é necessário calcular a média móvel semanal.

Para auxiliar o secretário de Saúde, faça uma função chamada "calcula_media_movel", que deve receber como parâmetros um array com a série de registros de mortes diária por covid e o número de dias de intervalo para calcular as médias. Essa função deve retornar um novo array sendo que o valor de cada elemento é a média de mortes com base no número de dias de intervalor informado no segundo parâmetro.

OBS.: O último elemento do novo array deve ser a média dos últimos números da série de registros que sobrarem.

Por exemplo:

mortes_diaria = [
    263, 240, 266, 259, 253, 257, 261, 
    239, 274, 264, 260, 262, 261, 273, 
    270, 278, 266, 277, 290, 294, 289, 
    294, 277, 293, 297, 247, 278, 297, 
    298, 262, 266, 304, 246, 279, 281
]

mortes_media_movel = calcula_media_movel(mortes_diaria, 7)
print(mortes_media_movel)
print("\n")
# deve imprimir
# [257.0, 261.85714285714283, 280.57142857142856, 283.2857142857143, 276.57142857142856]

mortes_media_movel = calcula_media_movel(mortes_diaria, 5)
print(mortes_media_movel)
print("\n")
# deve imprimir
# [256.2, 259.0, 265.2, 281.0, 290.0, 276.4, 275.2]

mortes_media_movel = calcula_media_movel(mortes_diaria, 10)
print(mortes_media_movel)
print("\n")
# deve imprimir
# [257.6, 273.1, 283.2, 275.2]

7) (Opcional) (Vale até 2,0 pontos)
Descreva o que o algoritmo abaixo está fazendo e qual o ajuste necessário para que a ordenação seja feita corretamente.
def ordenarArray(array)
    ordenado = false
    until ordenado 
       for i in(0..array.size-2)
            atual = i
            proximo = i + 1
            if array[atual] > array[proximo]
                temp = array[proximo]
                array[proximo] = array[atual]
                array[atual] = temp
                ordenado = true
            end    
       end  
    end
end
